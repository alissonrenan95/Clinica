// <auto-generated />
using System;
using ClinicaServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicaServer.Migrations
{
    [DbContext(typeof(DBClinicaContext))]
    [Migration("20230331210542_initialdb")]
    partial class initialdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("MySql:CharSet", "latin1")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClinicaServer.Models.Atendimento", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<bool>("Concluido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("concluido");

                    b.Property<DateTime>("Datahoraatendimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datahoraatendimento");

                    b.Property<uint>("Pacienteid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pacienteid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Pacienteid" }, "Atendimento_FKIndex1");

                    b.ToTable("atendimento", (string)null);
                });

            modelBuilder.Entity("ClinicaServer.Models.Examecovid", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Atendimentoid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("atendimentoid");

                    b.Property<bool>("Cansaco")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cansaco");

                    b.Property<bool?>("Concluido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("concluido");

                    b.Property<bool>("Coriza")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("coriza");

                    b.Property<bool>("Diarreia")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("diarreia");

                    b.Property<bool>("Dificuldadedelocomocao")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dificuldadedelocomocao");

                    b.Property<bool>("Dificuldadederespirar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dificuldadederespirar");

                    b.Property<bool>("Dordecabeca")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dordecabeca");

                    b.Property<bool>("Dordegarganta")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dordegarganta");

                    b.Property<bool>("Doresnocorpo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("doresnocorpo");

                    b.Property<bool>("Faltadeolfato")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("faltadeolfato");

                    b.Property<bool>("Faltadepaladar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("faltadepaladar");

                    b.Property<bool>("Febre")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("febre");

                    b.Property<bool>("Malestargeral")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("malestargeral");

                    b.Property<bool>("Narizentupido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("narizentupido");

                    b.Property<bool>("Tosse")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tosse");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Atendimentoid" }, "Examecovid_FKIndex1");

                    b.ToTable("examecovid", (string)null);
                });

            modelBuilder.Entity("ClinicaServer.Models.Examegeral", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Atendimentoid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("atendimentoid");

                    b.Property<bool>("Concluido")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("concluido");

                    b.Property<uint>("Pressaodiastolica")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pressaodiastolica");

                    b.Property<uint>("Pressaosistolica")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pressaosistolica");

                    b.Property<uint>("Pulsacao")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pulsacao");

                    b.Property<uint>("Respiracao")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("respiracao");

                    b.Property<float>("Temperatura")
                        .HasColumnType("float")
                        .HasColumnName("temperatura");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Atendimentoid" }, "Examegeral_FKIndex1");

                    b.ToTable("examegeral", (string)null);
                });

            modelBuilder.Entity("ClinicaServer.Models.Paciente", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("Cpf")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("Datanascimento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datanascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<ulong>("Telefone")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("telefone");

                    b.Property<string>("Urlimagem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("urlimagem");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cpf" }, "Paciente_uniqueindex")
                        .IsUnique();

                    b.ToTable("paciente", (string)null);
                });

            modelBuilder.Entity("ClinicaServer.Models.Atendimento", b =>
                {
                    b.HasOne("ClinicaServer.Models.Paciente", "Paciente")
                        .WithMany("Atendimento")
                        .HasForeignKey("Pacienteid")
                        .IsRequired()
                        .HasConstraintName("atendimento_ibfk_1");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaServer.Models.Examecovid", b =>
                {
                    b.HasOne("ClinicaServer.Models.Atendimento", "Atendimento")
                        .WithMany("Examecovid")
                        .HasForeignKey("Atendimentoid")
                        .IsRequired()
                        .HasConstraintName("examecovid_ibfk_1");

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("ClinicaServer.Models.Examegeral", b =>
                {
                    b.HasOne("ClinicaServer.Models.Atendimento", "Atendimento")
                        .WithMany("Examegeral")
                        .HasForeignKey("Atendimentoid")
                        .IsRequired()
                        .HasConstraintName("examegeral_ibfk_1");

                    b.Navigation("Atendimento");
                });

            modelBuilder.Entity("ClinicaServer.Models.Atendimento", b =>
                {
                    b.Navigation("Examecovid");

                    b.Navigation("Examegeral");
                });

            modelBuilder.Entity("ClinicaServer.Models.Paciente", b =>
                {
                    b.Navigation("Atendimento");
                });
#pragma warning restore 612, 618
        }
    }
}
